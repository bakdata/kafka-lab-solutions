/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bakdata.uni;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class RunnersStatus extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"RunnersStatus\",\"namespace\":\"com.bakdata.uni\","
                    + "\"fields\":[{\"name\":\"runner_id\",\"type\":{\"type\":\"string\",\"avro.java"
                    + ".string\":\"String\"}},{\"name\":\"session\",\"type\":{\"type\":\"string\",\"avro.java"
                    + ".string\":\"String\"}},{\"name\":\"distance\",\"type\":\"int\"},{\"name\":\"heart_rate\","
                    + "\"type\":\"int\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"run_time\","
                    + "\"type\":\"long\"}]}");
    private static final long serialVersionUID = -7234328946216782547L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<RunnersStatus> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<RunnersStatus> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<RunnersStatus>
            WRITER$ = (org.apache.avro.io.DatumWriter<RunnersStatus>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<RunnersStatus>
            READER$ = (org.apache.avro.io.DatumReader<RunnersStatus>) MODEL$.createDatumReader(SCHEMA$);
    private String runner_id;
    private String session;
    private int distance;
    private int heart_rate;
    private double speed;
    private long run_time;
    /**
     * Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that
     * is desired then one should use <code>newBuilder()</code>.
     */
    public RunnersStatus() {
    }
    /**
     * All-args constructor.
     *
     * @param runner_id The new value for runner_id
     * @param session The new value for session
     * @param distance The new value for distance
     * @param heart_rate The new value for heart_rate
     * @param speed The new value for speed
     * @param run_time The new value for run_time
     */
    public RunnersStatus(String runner_id, String session, Integer distance, Integer heart_rate, Double speed,
            Long run_time) {
        this.runner_id = runner_id;
        this.session = session;
        this.distance = distance;
        this.heart_rate = heart_rate;
        this.speed = speed;
        this.run_time = run_time;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<RunnersStatus> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<RunnersStatus> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<RunnersStatus> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a RunnersStatus from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a RunnersStatus instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static RunnersStatus fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new RunnersStatus RecordBuilder.
     *
     * @return A new RunnersStatus RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new RunnersStatus RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new RunnersStatus RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new RunnersStatus RecordBuilder by copying an existing RunnersStatus instance.
     *
     * @param other The existing instance to copy.
     * @return A new RunnersStatus RecordBuilder
     */
    public static Builder newBuilder(RunnersStatus other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Serializes this RunnersStatus to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return runner_id;
            case 1:
                return session;
            case 2:
                return distance;
            case 3:
                return heart_rate;
            case 4:
                return speed;
            case 5:
                return run_time;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                runner_id = value$ != null ? value$.toString() : null;
                break;
            case 1:
                session = value$ != null ? value$.toString() : null;
                break;
            case 2:
                distance = (Integer) value$;
                break;
            case 3:
                heart_rate = (Integer) value$;
                break;
            case 4:
                speed = (Double) value$;
                break;
            case 5:
                run_time = (Long) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'runner_id' field.
     *
     * @return The value of the 'runner_id' field.
     */
    public String getRunnerId() {
        return runner_id;
    }

    /**
     * Sets the value of the 'runner_id' field.
     *
     * @param value the value to set.
     */
    public void setRunnerId(String value) {
        this.runner_id = value;
    }

    /**
     * Gets the value of the 'session' field.
     *
     * @return The value of the 'session' field.
     */
    public String getSession() {
        return session;
    }

    /**
     * Sets the value of the 'session' field.
     *
     * @param value the value to set.
     */
    public void setSession(String value) {
        this.session = value;
    }

    /**
     * Gets the value of the 'distance' field.
     *
     * @return The value of the 'distance' field.
     */
    public int getDistance() {
        return distance;
    }

    /**
     * Sets the value of the 'distance' field.
     *
     * @param value the value to set.
     */
    public void setDistance(int value) {
        this.distance = value;
    }

    /**
     * Gets the value of the 'heart_rate' field.
     *
     * @return The value of the 'heart_rate' field.
     */
    public int getHeartRate() {
        return heart_rate;
    }

    /**
     * Sets the value of the 'heart_rate' field.
     *
     * @param value the value to set.
     */
    public void setHeartRate(int value) {
        this.heart_rate = value;
    }

    /**
     * Gets the value of the 'speed' field.
     *
     * @return The value of the 'speed' field.
     */
    public double getSpeed() {
        return speed;
    }

    /**
     * Sets the value of the 'speed' field.
     *
     * @param value the value to set.
     */
    public void setSpeed(double value) {
        this.speed = value;
    }

    /**
     * Gets the value of the 'run_time' field.
     *
     * @return The value of the 'run_time' field.
     */
    public long getRunTime() {
        return run_time;
    }

    /**
     * Sets the value of the 'run_time' field.
     *
     * @param value the value to set.
     */
    public void setRunTime(long value) {
        this.run_time = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.runner_id);

        out.writeString(this.session);

        out.writeInt(this.distance);

        out.writeInt(this.heart_rate);

        out.writeDouble(this.speed);

        out.writeLong(this.run_time);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.runner_id = in.readString();

            this.session = in.readString();

            this.distance = in.readInt();

            this.heart_rate = in.readInt();

            this.speed = in.readDouble();

            this.run_time = in.readLong();

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.runner_id = in.readString();
                        break;

                    case 1:
                        this.session = in.readString();
                        break;

                    case 2:
                        this.distance = in.readInt();
                        break;

                    case 3:
                        this.heart_rate = in.readInt();
                        break;

                    case 4:
                        this.speed = in.readDouble();
                        break;

                    case 5:
                        this.run_time = in.readLong();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    /**
     * RecordBuilder for RunnersStatus instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RunnersStatus>
            implements org.apache.avro.data.RecordBuilder<RunnersStatus> {

        private String runner_id;
        private String session;
        private int distance;
        private int heart_rate;
        private double speed;
        private long run_time;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.runner_id)) {
                this.runner_id = data().deepCopy(fields()[0].schema(), other.runner_id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.session)) {
                this.session = data().deepCopy(fields()[1].schema(), other.session);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.distance)) {
                this.distance = data().deepCopy(fields()[2].schema(), other.distance);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.heart_rate)) {
                this.heart_rate = data().deepCopy(fields()[3].schema(), other.heart_rate);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.speed)) {
                this.speed = data().deepCopy(fields()[4].schema(), other.speed);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.run_time)) {
                this.run_time = data().deepCopy(fields()[5].schema(), other.run_time);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing RunnersStatus instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(RunnersStatus other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.runner_id)) {
                this.runner_id = data().deepCopy(fields()[0].schema(), other.runner_id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.session)) {
                this.session = data().deepCopy(fields()[1].schema(), other.session);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.distance)) {
                this.distance = data().deepCopy(fields()[2].schema(), other.distance);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.heart_rate)) {
                this.heart_rate = data().deepCopy(fields()[3].schema(), other.heart_rate);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.speed)) {
                this.speed = data().deepCopy(fields()[4].schema(), other.speed);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.run_time)) {
                this.run_time = data().deepCopy(fields()[5].schema(), other.run_time);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'runner_id' field.
         *
         * @return The value.
         */
        public String getRunnerId() {
            return runner_id;
        }


        /**
         * Sets the value of the 'runner_id' field.
         *
         * @param value The value of 'runner_id'.
         * @return This builder.
         */
        public Builder setRunnerId(String value) {
            validate(fields()[0], value);
            this.runner_id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'runner_id' field has been set.
         *
         * @return True if the 'runner_id' field has been set, false otherwise.
         */
        public boolean hasRunnerId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'runner_id' field.
         *
         * @return This builder.
         */
        public Builder clearRunnerId() {
            runner_id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'session' field.
         *
         * @return The value.
         */
        public String getSession() {
            return session;
        }


        /**
         * Sets the value of the 'session' field.
         *
         * @param value The value of 'session'.
         * @return This builder.
         */
        public Builder setSession(String value) {
            validate(fields()[1], value);
            this.session = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'session' field has been set.
         *
         * @return True if the 'session' field has been set, false otherwise.
         */
        public boolean hasSession() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'session' field.
         *
         * @return This builder.
         */
        public Builder clearSession() {
            session = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'distance' field.
         *
         * @return The value.
         */
        public int getDistance() {
            return distance;
        }


        /**
         * Sets the value of the 'distance' field.
         *
         * @param value The value of 'distance'.
         * @return This builder.
         */
        public Builder setDistance(int value) {
            validate(fields()[2], value);
            this.distance = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'distance' field has been set.
         *
         * @return True if the 'distance' field has been set, false otherwise.
         */
        public boolean hasDistance() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'distance' field.
         *
         * @return This builder.
         */
        public Builder clearDistance() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'heart_rate' field.
         *
         * @return The value.
         */
        public int getHeartRate() {
            return heart_rate;
        }


        /**
         * Sets the value of the 'heart_rate' field.
         *
         * @param value The value of 'heart_rate'.
         * @return This builder.
         */
        public Builder setHeartRate(int value) {
            validate(fields()[3], value);
            this.heart_rate = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'heart_rate' field has been set.
         *
         * @return True if the 'heart_rate' field has been set, false otherwise.
         */
        public boolean hasHeartRate() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'heart_rate' field.
         *
         * @return This builder.
         */
        public Builder clearHeartRate() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'speed' field.
         *
         * @return The value.
         */
        public double getSpeed() {
            return speed;
        }


        /**
         * Sets the value of the 'speed' field.
         *
         * @param value The value of 'speed'.
         * @return This builder.
         */
        public Builder setSpeed(double value) {
            validate(fields()[4], value);
            this.speed = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'speed' field has been set.
         *
         * @return True if the 'speed' field has been set, false otherwise.
         */
        public boolean hasSpeed() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'speed' field.
         *
         * @return This builder.
         */
        public Builder clearSpeed() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'run_time' field.
         *
         * @return The value.
         */
        public long getRunTime() {
            return run_time;
        }


        /**
         * Sets the value of the 'run_time' field.
         *
         * @param value The value of 'run_time'.
         * @return This builder.
         */
        public Builder setRunTime(long value) {
            validate(fields()[5], value);
            this.run_time = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'run_time' field has been set.
         *
         * @return True if the 'run_time' field has been set, false otherwise.
         */
        public boolean hasRunTime() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'run_time' field.
         *
         * @return This builder.
         */
        public Builder clearRunTime() {
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public RunnersStatus build() {
            try {
                RunnersStatus record = new RunnersStatus();
                record.runner_id = fieldSetFlags()[0] ? this.runner_id : (String) defaultValue(fields()[0]);
                record.session = fieldSetFlags()[1] ? this.session : (String) defaultValue(fields()[1]);
                record.distance = fieldSetFlags()[2] ? this.distance : (Integer) defaultValue(fields()[2]);
                record.heart_rate = fieldSetFlags()[3] ? this.heart_rate : (Integer) defaultValue(fields()[3]);
                record.speed = fieldSetFlags()[4] ? this.speed : (Double) defaultValue(fields()[4]);
                record.run_time = fieldSetFlags()[5] ? this.run_time : (Long) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










